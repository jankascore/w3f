/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface JankaProtocolInterface extends utils.Interface {
  functions: {
    "CHALLENGE_WINDOW()": FunctionFragment;
    "REQUIRED_ATTESTATION_STAKE()": FunctionFragment;
    "allowAlgorithmCID(string)": FunctionFragment;
    "allowVerifier(address)": FunctionFragment;
    "allowlistedVerifiers(address)": FunctionFragment;
    "attest(uint8,string,uint256)": FunctionFragment;
    "attestations(address)": FunctionFragment;
    "challenge(address,uint8,string,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "supportedAlgorithms(string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawStake()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CHALLENGE_WINDOW"
      | "REQUIRED_ATTESTATION_STAKE"
      | "allowAlgorithmCID"
      | "allowVerifier"
      | "allowlistedVerifiers"
      | "attest"
      | "attestations"
      | "challenge"
      | "owner"
      | "renounceOwnership"
      | "supportedAlgorithms"
      | "transferOwnership"
      | "withdrawStake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CHALLENGE_WINDOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REQUIRED_ATTESTATION_STAKE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowAlgorithmCID",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowVerifier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistedVerifiers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "attest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "attestations",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "challenge",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportedAlgorithms",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CHALLENGE_WINDOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REQUIRED_ATTESTATION_STAKE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowAlgorithmCID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistedVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "attest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "attestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "challenge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedAlgorithms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "ScoreAttested(address,uint8,string,uint256)": EventFragment;
    "ScoreChallenged(address,address,uint8,uint8,string)": EventFragment;
    "StakeWithdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScoreAttested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScoreChallenged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeWithdrawn"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ScoreAttestedEventObject {
  attester: string;
  score: number;
  algorithmCID: string;
  timestamp: BigNumber;
}
export type ScoreAttestedEvent = TypedEvent<
  [string, number, string, BigNumber],
  ScoreAttestedEventObject
>;

export type ScoreAttestedEventFilter = TypedEventFilter<ScoreAttestedEvent>;

export interface ScoreChallengedEventObject {
  attester: string;
  challenger: string;
  scoreClaimed: number;
  scoreActual: number;
  algorithmCID: string;
}
export type ScoreChallengedEvent = TypedEvent<
  [string, string, number, number, string],
  ScoreChallengedEventObject
>;

export type ScoreChallengedEventFilter = TypedEventFilter<ScoreChallengedEvent>;

export interface StakeWithdrawnEventObject {
  attester: string;
  amount: BigNumber;
}
export type StakeWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  StakeWithdrawnEventObject
>;

export type StakeWithdrawnEventFilter = TypedEventFilter<StakeWithdrawnEvent>;

export interface JankaProtocol extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JankaProtocolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CHALLENGE_WINDOW(overrides?: CallOverrides): Promise<[BigNumber]>;

    REQUIRED_ATTESTATION_STAKE(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowAlgorithmCID(
      _algorithmCID: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowVerifier(
      _verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowlistedVerifiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    attest(
      _score: PromiseOrValue<BigNumberish>,
      _algorithmCID: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    attestations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, string, BigNumber] & {
        score: number;
        isStakeClaimed: boolean;
        algorithmCID: string;
        finalizationTime: BigNumber;
      }
    >;

    challenge(
      _attester: PromiseOrValue<string>,
      _score: PromiseOrValue<BigNumberish>,
      _algorithmCID: PromiseOrValue<string>,
      _rewardRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportedAlgorithms(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawStake(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CHALLENGE_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

  REQUIRED_ATTESTATION_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

  allowAlgorithmCID(
    _algorithmCID: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowVerifier(
    _verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowlistedVerifiers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  attest(
    _score: PromiseOrValue<BigNumberish>,
    _algorithmCID: PromiseOrValue<string>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  attestations(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [number, boolean, string, BigNumber] & {
      score: number;
      isStakeClaimed: boolean;
      algorithmCID: string;
      finalizationTime: BigNumber;
    }
  >;

  challenge(
    _attester: PromiseOrValue<string>,
    _score: PromiseOrValue<BigNumberish>,
    _algorithmCID: PromiseOrValue<string>,
    _rewardRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportedAlgorithms(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawStake(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CHALLENGE_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

    REQUIRED_ATTESTATION_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

    allowAlgorithmCID(
      _algorithmCID: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowVerifier(
      _verifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowlistedVerifiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    attest(
      _score: PromiseOrValue<BigNumberish>,
      _algorithmCID: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    attestations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, string, BigNumber] & {
        score: number;
        isStakeClaimed: boolean;
        algorithmCID: string;
        finalizationTime: BigNumber;
      }
    >;

    challenge(
      _attester: PromiseOrValue<string>,
      _score: PromiseOrValue<BigNumberish>,
      _algorithmCID: PromiseOrValue<string>,
      _rewardRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    supportedAlgorithms(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawStake(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ScoreAttested(address,uint8,string,uint256)"(
      attester?: PromiseOrValue<string> | null,
      score?: null,
      algorithmCID?: null,
      timestamp?: null
    ): ScoreAttestedEventFilter;
    ScoreAttested(
      attester?: PromiseOrValue<string> | null,
      score?: null,
      algorithmCID?: null,
      timestamp?: null
    ): ScoreAttestedEventFilter;

    "ScoreChallenged(address,address,uint8,uint8,string)"(
      attester?: PromiseOrValue<string> | null,
      challenger?: PromiseOrValue<string> | null,
      scoreClaimed?: null,
      scoreActual?: null,
      algorithmCID?: null
    ): ScoreChallengedEventFilter;
    ScoreChallenged(
      attester?: PromiseOrValue<string> | null,
      challenger?: PromiseOrValue<string> | null,
      scoreClaimed?: null,
      scoreActual?: null,
      algorithmCID?: null
    ): ScoreChallengedEventFilter;

    "StakeWithdrawn(address,uint256)"(
      attester?: PromiseOrValue<string> | null,
      amount?: null
    ): StakeWithdrawnEventFilter;
    StakeWithdrawn(
      attester?: PromiseOrValue<string> | null,
      amount?: null
    ): StakeWithdrawnEventFilter;
  };

  estimateGas: {
    CHALLENGE_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

    REQUIRED_ATTESTATION_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

    allowAlgorithmCID(
      _algorithmCID: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowVerifier(
      _verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowlistedVerifiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    attest(
      _score: PromiseOrValue<BigNumberish>,
      _algorithmCID: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    attestations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    challenge(
      _attester: PromiseOrValue<string>,
      _score: PromiseOrValue<BigNumberish>,
      _algorithmCID: PromiseOrValue<string>,
      _rewardRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportedAlgorithms(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawStake(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CHALLENGE_WINDOW(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REQUIRED_ATTESTATION_STAKE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowAlgorithmCID(
      _algorithmCID: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowVerifier(
      _verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowlistedVerifiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    attest(
      _score: PromiseOrValue<BigNumberish>,
      _algorithmCID: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    attestations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    challenge(
      _attester: PromiseOrValue<string>,
      _score: PromiseOrValue<BigNumberish>,
      _algorithmCID: PromiseOrValue<string>,
      _rewardRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportedAlgorithms(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawStake(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
